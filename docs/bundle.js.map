{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/lib/Universe.js","webpack:///./src/lib/Controller.js","webpack:///./src/demo/index.js","webpack:///./src/demo/DevConsole.js"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Universe","constructor","args","this","universe","Array","fill","update","channel","Promise","resolve","reject","Number","isInteger","splice","isArray","Error","length","Controller","device","filters","vendorId","productId","enable","navigator","usb","requestDevice","then","selectedDevice","getPairedDevice","getDevices","devices","autoconnect","connect","open","configuration","selectConfiguration","claimInterface","controlTransferOut","requestType","recipient","request","index","catch","error","console","log","send","data","concat","slice","buffer","Uint8Array","from","transferOut","disconnect","close","controller","devConsole","output","document","getElementById","message","type","fullMessage","JSON","stringify","elem","createElement","innerHTML","appendChild","enableWebusb","disconnectWebusb","color","dimmer","uv","strobe","usbInfo","productName","configurations","deviceClass","deviceProtocol","deviceSubclass","deviceVersionMajor","deviceVersionMinor","deviceVersionSubminor","manufacturerName","opened","serialNumber","usbVersionMajor","usbVersionMinor","usbVersionSubminor","addEventListener","e","channels","target","match","map","v","parseInt"],"mappings":"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","file":"bundle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","export default class Universe {\n  constructor(args) {\n    this.universe = args.universe || new Array(512).fill(0)\n  }\n\n  update(channel, value) {\n    return new Promise((resolve, reject) => {\n\n      // The array starts at 0, but the DMX512 channel with 1\n      channel = channel - 1\n\n      if (Number.isInteger(value)) {\n        this.universe.splice(channel, 1, value)\n      } else if (Array.isArray(value)) {\n        this.universe.splice(channel, value.length, ...value)\n      } else {\n        return reject(new Error('Could not update channel because value is not of type Integer or Array'))\n      }\n\n      return resolve(this.universe)\n\n    })\n  }\n\n}\n","export default class Controller {\n  constructor(args) {\n    // Reference to the selected USB device\n    this.device = null\n\n    // Only allow specific USB devices\n    this.filters = args.filters || [\n      // Arduino LLC (10755), Leonardo ETH (32832)\n      { vendorId: 0x2a03, productId: 0x8040 }\n    ]\n  }\n\n  /*\n   * Enable WebUSB, which has to be triggered by a user gesture\n   *\n   * @return selectedDevice\n   */\n  enable() {\n    // Request access to the USB device\n    return navigator.usb.requestDevice({ filters: this.filters })\n\n    .then(selectedDevice => {\n      this.device = selectedDevice\n    })\n  }\n\n  /*\n   * Get a USB device that was already paired with the browser.\n   */\n  getPairedDevice() {\n    return navigator.usb.getDevices()\n\n    .then(devices => {\n      return devices[0]\n    })\n  }\n\n  /*\n   * Automatically connect to a USB device that was already paired.\n   */\n  autoconnect() {\n    return this.getPairedDevice().then((device) => {\n      this.device = device\n      return this.connect()\n    })\n  }\n\n  /*\n   * Open a connection to the selected USB device\n   */\n  connect() {\n    // Open connection\n    return this.device.open()\n\n    // Select #1 configuration if not automatially set by OS\n    .then(() => {\n      if (this.device.configuration === null) {\n        return this.device.selectConfiguration(1)\n      }\n    })\n\n    // Get exclusive access to the #2 interface\n    .then(() => this.device.claimInterface(2))\n\n    // Tell the USB device that we are ready to send data\n    .then(() => this.device.controlTransferOut({\n        // It's a USB class request\n        'requestType': 'class',\n        // The destination of this request is the interface\n        'recipient': 'interface',\n        // CDC: Communication Device Class\n        // 0x22: SET_CONTROL_LINE_STATE\n        // RS-232 signal used to tell the USB device that the computer is now present.\n        'request': 0x22,\n        // Yes\n        'value': 0x01,\n        // Interface #2\n        'index': 0x02\n      })\n    )\n\n    .catch(error => console.log(error))\n  }\n\n  /*\n   * Send data to the USB device\n   */\n  send(data) {\n    // Create array with 512 x 0 and then concat with the data\n    const universe = data.concat(new Array(512).fill(0).slice(data.length, 512))\n\n    // Create an ArrayBuffer, because that is needed for WebUSB\n    const buffer = Uint8Array.from(universe)\n\n    // Send data on Endpoint #4\n    return this.device.transferOut(4, buffer)\n  }\n\n  /*\n   * Disconnect from the USB device\n   */\n  disconnect() {\n    // Declare that we don't want to receive data anymore\n    return this.device.controlTransferOut({\n      // It's a USB class request\n      'requestType': 'class',\n      // The destination of this request is the interface\n      'recipient': 'interface',\n      // CDC: Communication Device Class\n      // 0x22: SET_CONTROL_LINE_STATE\n      // RS-232 signal used to tell the USB device that the computer is now present.\n      'request': 0x22,\n      // No\n      'value': 0x01,\n      // Interface #2\n      'index': 0x02\n    })\n\n    // Close the connection to the USB device\n    .then(() => this.device.close())\n  }\n}\n","import Controller from '../lib/Controller.js'\nimport Universe from '../lib/Universe.js'\n\nimport DevConsole from './DevConsole.js'\n\nconst controller = new Controller({})\nconst universe = new Universe({})\nconst devConsole = new DevConsole({})\n\nconst enableWebusb = document.getElementById('activateWebUsb')\nconst disconnectWebusb = document.getElementById('disconnectWebUsb')\nconst color = document.getElementById('changeColor')\nconst dimmer = document.getElementById('changeDimmer')\nconst uv = document.getElementById('changeUv')\nconst strobe = document.getElementById('changeStrobe')\n\n/*\n * Basic information about the USB device\n */\nconst usbInfo = (device) => {\n  devConsole.log('---', '', 'string')\n  devConsole.log('Selected device', device.productName, 'USBDevice')\n  devConsole.log('---', '', 'string')\n\n  const { configuration, configurations, deviceClass, deviceProtocol,\n    deviceSubclass, deviceVersionMajor, deviceVersionMinor,\n    deviceVersionSubminor, manufacturerName, opened, productId,\n    productName, serialNumber, usbVersionMajor, usbVersionMinor,\n    usbVersionSubminor, vendorId } = device\n\n  devConsole.log('Opened', opened, 'keyvalue')\n  devConsole.log('Vendor ID', vendorId, 'keyvalue')\n  devConsole.log('Manufacturer Name', manufacturerName, 'keyvalue')\n  devConsole.log('Product ID', productId, 'keyvalue')\n  devConsole.log('Product Name', productName, 'keyvalue')\n  devConsole.log('Serialnumber', serialNumber, 'keyvalue')\n\n  devConsole.log('Device Class', deviceClass, 'keyvalue')\n  devConsole.log('Device Protocol', deviceProtocol, 'keyvalue')\n  devConsole.log('Device Subclass', deviceSubclass, 'keyvalue')\n  devConsole.log('Device Version Major', deviceVersionMajor, 'keyvalue')\n  devConsole.log('Device Version Minor', deviceVersionMinor, 'keyvalue')\n  devConsole.log('Device Version Subminor', deviceVersionSubminor, 'keyvalue')\n\n  devConsole.log('USB Version Major', usbVersionMajor, 'keyvalue')\n  devConsole.log('USB Version Minor', usbVersionMinor, 'keyvalue')\n  devConsole.log('USB Version Subminor', usbVersionSubminor, 'keyvalue')\n  devConsole.log('---', '', 'string')\n}\n\n\n// Automatically connect to paired device\ncontroller.autoconnect().then(() => {\n  usbInfo(controller.device)\n})\n\n// Select USB device and open a connection to it\nenableWebusb.addEventListener('click', e => {\n  controller.enable().then(() => {\n\n    controller.connect().then(() => {\n      usbInfo(controller.device)\n    })\n  })\n\n})\n\n// Disconnect from USB device\ndisconnectWebusb.addEventListener('click', e => {\n  controller.disconnect()\n})\n\n\n\nconst update = (channel, value) => {\n   return universe.update(channel, value).then((channels) => {\n\n     devConsole.log('Universe:', channels, 'array')\n\n     // Send updated universe to controller\n     return controller.send(channels)\n   })\n }\n\n\n /*\n  * ---\n  * Flat PAR\n  * ---\n  *\n  * Amount of channels: 6\n  * DMX512 Address in Universe: 1\n  *\n  * Channel #1: Red\n  * Channel #2: Green\n  * Channel #3: Blue\n  * Channel #4: UV\n  * Channel #5: Dimmer\n  * Channel #6: Strobe\n  */\n\n/*\n * Color = Red, Green & Blue = 3 Channels\n */\ncolor.addEventListener('change', e => {\n  // Convert hex color to RGB\n  let value = e.target.value.match(/[A-Za-z0-9]{2}/g).map(v => parseInt(v, 16))\n\n  devConsole.log(`Set Color on Channel 1 - 3 to ${value}`, '', 'string')\n\n  // Update starts at channel 1 and goes until channel 3\n  // Why? We are sending an array with 3 values\n  update(1, value)\n})\n\n/*\n * UV = 1 Channel\n * Control the intensity of UV light\n */\nuv.addEventListener('change', e => {\n  let value = parseInt(e.target.value, 10)\n\n  devConsole.log(`Set UV on Channel 4 to ${value}`, '', 'string')\n\n  // Update starts at channel 4\n  update(4, value)\n})\n\n/*\n * Dimmer = 1 Channel\n * Control the brightness of the PAR light\n * If dimmer is 0, then no color / UV is shown\n * If dimmer is 255, then LEDs are at full brightness\n */\ndimmer.addEventListener('change', e => {\n  let value = parseInt(e.target.value, 10)\n\n  devConsole.log(`Set Dimmer on Channel 5 to ${value}`, '', 'string')\n\n  // Update starts at channel 5\n  update(5, value)\n})\n\n/*\n * Strobe = 1 Channel\n * Control the strobe effect\n * If strobe is 0, no flashing of the LEDs\n * If strobe is 255, then the LEDs flash at a super high rate\n */\nstrobe.addEventListener('change', e => {\n  let value = parseInt(e.target.value, 10)\n\n  devConsole.log(`Set Strobe on Channel 6 to ${value}`, '', 'string')\n\n  // Update starts at channel 6\n  update(6, value)\n})\n","export default class DevConsole {\n  constructor() {\n    this.output = document.getElementById('console')\n  }\n\n  log(message, data, type) {\n    let fullMessage = ''\n\n    switch (type) {\n      case 'USBDevice':\n        fullMessage = `${message}: ${data}`\n        break\n\n      case 'array':\n        fullMessage = message + ' ' + JSON.stringify(data)\n        break\n\n      case 'keyvalue':\n        fullMessage = `${message}: ${data}`\n        break\n\n      default:\n        fullMessage = message + ' ' + data\n    }\n\n    console.log(fullMessage)\n\n    let elem = document.createElement('span')\n    elem.innerHTML = fullMessage\n    this.output.appendChild(elem)\n  }\n\n}\n"],"sourceRoot":""}