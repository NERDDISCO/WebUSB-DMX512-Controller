{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./controller.js","webpack:///./demo/index.js","webpack:///./demo/dev-console.js"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","Controller","constructor","args","this","device","undefined","filters","vendorId","productId","universe","Array","fill","enable","navigator","usb","requestDevice","then","selectedDevice","getPairedDevice","getDevices","devices","autoConnect","Promise","resolve","reject","Error","connect","open","configuration","selectConfiguration","claimInterface","controlTransferOut","requestType","recipient","request","index","catch","error","console","log","send","data","buffer","Uint8Array","from","transferOut","updateUniverse","channel","Number","isInteger","splice","isArray","length","disconnect","close","demo_controller","controller","devConsole","output","document","getElementById","message","type","fullMessage","JSON","stringify","scrollTop","scrollHeight","activateButton","disconnectButton","color","dimmer","uv","strobe","usbInfo","productName","configurations","deviceClass","deviceProtocol","deviceSubclass","deviceVersionMajor","deviceVersionMinor","deviceVersionSubminor","manufacturerName","opened","serialNumber","usbVersionMajor","usbVersionMinor","usbVersionSubminor","addEventListener","e","target","match","map","v","parseInt"],"mappings":"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","file":"bundle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\n * The controller that is creating a connection to the USB device (Arduino)\n * to send data to it using WebUSB.\n *\n * @param {object} args - Arguments to configure the controller\n */\nexport default class Controller {\n  constructor(args = {}) {\n    // Reference to the selected USB device\n    this.device = args.device || undefined\n\n    // Only allow specific USB devices\n    this.filters = args.filters || [\n      // Arduino LLC (10755), Leonardo ETH (32832)\n      { vendorId: 0x2a03, productId: 0x8040 }\n    ]\n\n    // The DMX512 universe with 512 channels\n    this.universe = args.universe || new Array(512).fill(0)\n  }\n\n  /**\n   * Enable WebUSB and when successful\n   * Save a reference to the selected USB device\n   *\n   * Note: This function has to be triggered by a user gesture\n   *\n   * @returns {Promise}\n   */\n  enable() {\n    // Request access to the USB device\n    return navigator.usb.requestDevice({ filters: this.filters })\n\n    // selectedDevice = the USB device that was selected by the user in the browser\n    .then(selectedDevice => {\n      this.device = selectedDevice\n    })\n  }\n\n  /**\n   * Get a USB device that was already paired with the browser.\n   *\n   * @returns {Promise}\n   */\n  getPairedDevice() {\n    return navigator.usb.getDevices()\n\n    .then(devices => {\n      return devices[0]\n    })\n  }\n\n  /**\n   * Automatically connect to a USB device that was already\n   * paired with the Browser and save a reference to the device.\n   *\n   * @returns {Promise}\n   */\n  autoConnect() {\n    return this.getPairedDevice().then((device) => {\n\n      this.device = device\n\n      return new Promise((resolve, reject) => {\n\n        // USB Device is not connected to the computer\n        if (this.device === undefined) {\n          return reject(new Error('USB device is not connected to the computer'))\n\n        // USB device is connected to the computer, so try to create a WebUSB connection\n        } else {\n          return resolve(this.connect())\n        }\n\n      })\n\n    })\n  }\n\n  /**\n   * Open a connection to the selected USB device and tell the device that\n   * we are ready to send data to it.\n   *\n   * @returns {Promise}\n   */\n  connect() {\n    // Open connection\n    return this.device.open()\n\n    // Select #1 configuration if not automatially set by OS\n    .then(() => {\n      if (this.device.configuration === null) {\n        return this.device.selectConfiguration(1)\n      }\n    })\n\n    // Get exclusive access to the #2 interface\n    .then(() => this.device.claimInterface(2))\n\n    // Tell the USB device that we are ready to send data\n    .then(() => this.device.controlTransferOut({\n        // It's a USB class request\n        'requestType': 'class',\n        // The destination of this request is the interface\n        'recipient': 'interface',\n        // CDC: Communication Device Class\n        // 0x22: SET_CONTROL_LINE_STATE\n        // RS-232 signal used to tell the USB device that the computer is now present.\n        'request': 0x22,\n        // Yes\n        'value': 0x01,\n        // Interface #2\n        'index': 0x02\n      })\n    )\n\n    .catch(error => console.log(error))\n  }\n\n  /**\n   * Send data to the USB device to update the DMX512 universe\n   *\n   * @param {Array} data - List containing all channels that should be updated in the universe\n   *\n   * @returns {Promise}\n   */\n  send(data) {\n    return new Promise((resolve, reject) => {\n\n      // USB Device is not connected to the computer\n      if (this.device === undefined) {\n        return reject(new Error('USB device is not connected to the computer'))\n\n      // USB device is connected to the computer, so try to create a WebUSB connection\n      } else {\n        // Create an ArrayBuffer, because that is needed for WebUSB\n        const buffer = Uint8Array.from(data)\n\n        // Send data on Endpoint #4\n        return resolve(this.device.transferOut(4, buffer))\n      }\n\n    })\n  }\n\n  /**\n   * Update the channel(s) of the DMX512 universe with the provided value\n   *\n   * @param {number} channel - The channel to update\n   * @param {(number|Array)} value - The value to update the channel:\n   * number: Update the channel with value\n   * array: Update value.length channels starting with channel\n   */\n  updateUniverse(channel, value) {\n    return new Promise((resolve, reject) => {\n\n      // The DMX512 universe starts with channel 1, but the array with 0\n      channel = channel - 1\n\n      if (Number.isInteger(value)) {\n        this.universe.splice(channel, 1, value)\n      } else if (Array.isArray(value)) {\n        this.universe.splice(channel, value.length, ...value)\n      } else {\n        return reject(new Error('Could not update Universe because the provided value is not of type Integer or Array'))\n      }\n\n      // Send the updated universe to the DMX512 controller\n      return resolve(this.send(this.universe))\n\n    })\n  }\n\n  /**\n   * Disconnect from the USB device\n   *\n   * Note: The device is still paired to the browser!\n   *\n   * @returns {Promise}\n   */\n  disconnect() {\n    // Declare that we don't want to receive data anymore\n    return this.device.controlTransferOut({\n      // It's a USB class request\n      'requestType': 'class',\n      // The destination of this request is the interface\n      'recipient': 'interface',\n      // CDC: Communication Device Class\n      // 0x22: SET_CONTROL_LINE_STATE\n      // RS-232 signal used to tell the USB device that the computer is not present anymore\n      'request': 0x22,\n      // No\n      'value': 0x01,\n      // Interface #2\n      'index': 0x02\n    })\n\n    // Close the connection to the USB device\n    .then(() => this.device.close())\n  }\n}\n","import Controller from '../controller.js'\n\nimport DevConsole from './dev-console.js'\n\nconst controller = new Controller()\nconst devConsole = new DevConsole()\n\nconst activateButton = document.getElementById('activateWebUsb')\nconst disconnectButton = document.getElementById('disconnectWebUsb')\nconst color = document.getElementById('changeColor')\nconst dimmer = document.getElementById('changeDimmer')\nconst uv = document.getElementById('changeUv')\nconst strobe = document.getElementById('changeStrobe')\n\n/*\n * Basic information about the USB device\n */\nconst usbInfo = (device) => {\n  devConsole.log('---', '', 'string')\n  devConsole.log('Selected device', device.productName, 'USBDevice')\n  devConsole.log('---', '', 'string')\n\n  const { configuration, configurations, deviceClass, deviceProtocol,\n    deviceSubclass, deviceVersionMajor, deviceVersionMinor,\n    deviceVersionSubminor, manufacturerName, opened, productId,\n    productName, serialNumber, usbVersionMajor, usbVersionMinor,\n    usbVersionSubminor, vendorId } = device\n\n  devConsole.log('Opened', opened, 'keyvalue')\n  devConsole.log('Vendor ID', vendorId, 'keyvalue')\n  devConsole.log('Manufacturer Name', manufacturerName, 'keyvalue')\n  devConsole.log('Product ID', productId, 'keyvalue')\n  devConsole.log('Product Name', productName, 'keyvalue')\n  devConsole.log('Serialnumber', serialNumber, 'keyvalue')\n\n  devConsole.log('Device Class', deviceClass, 'keyvalue')\n  devConsole.log('Device Protocol', deviceProtocol, 'keyvalue')\n  devConsole.log('Device Subclass', deviceSubclass, 'keyvalue')\n  devConsole.log('Device Version Major', deviceVersionMajor, 'keyvalue')\n  devConsole.log('Device Version Minor', deviceVersionMinor, 'keyvalue')\n  devConsole.log('Device Version Subminor', deviceVersionSubminor, 'keyvalue')\n\n  devConsole.log('USB Version Major', usbVersionMajor, 'keyvalue')\n  devConsole.log('USB Version Minor', usbVersionMinor, 'keyvalue')\n  devConsole.log('USB Version Subminor', usbVersionSubminor, 'keyvalue')\n}\n\n\n// Automatically connect to paired USB device\ncontroller.autoConnect()\n.then(() => {\n  devConsole.log('Found an already paired USB device', '', 'string')\n  usbInfo(controller.device)\n})\n.catch((error) => {\n  devConsole.log('Found an already paired USB device', '', 'string')\n  devConsole.log(error, '', 'string')\n})\n\n\n// Select USB device and open a connection to it\nactivateButton.addEventListener('click', e => {\n\n  // Enable WebUSB and select the Arduino\n  controller.enable().then(() => {\n\n    // Create a connection to the selected Arduino\n    controller.connect().then(() => {\n\n      // Successfully created a connection to the device\n      usbInfo(controller.device)\n    })\n  })\n  .catch(() => {\n    devConsole.log('No USB device was selected', '', 'string')\n  })\n\n})\n\n// Disconnect from USB device\ndisconnectButton.addEventListener('click', e => {\n  controller.disconnect().then(() => {\n    devConsole.log('Destroyed connection to USB device, but USB device is still paired with the browser', '', 'string')\n  })\n})\n\n\n /*\n  * ---\n  * Flat PAR\n  * ---\n  *\n  * Amount of channels: 6\n  * DMX512 Address in Universe: 1\n  *\n  * Channel #1: Red\n  * Channel #2: Green\n  * Channel #3: Blue\n  * Channel #4: UV\n  * Channel #5: Dimmer\n  * Channel #6: Strobe\n  */\n\n/*\n * Color = Red, Green & Blue = 3 Channels\n */\ncolor.addEventListener('change', e => {\n  // Convert hex color to RGB\n  let value = e.target.value.match(/[A-Za-z0-9]{2}/g).map(v => parseInt(v, 16))\n\n  devConsole.log('---', '', 'string')\n  devConsole.log(`Set Color on Channel 1 - 3 to ${value}`, '', 'string')\n\n  // Update starts at channel 1 and goes until channel 3\n  // Why? We are sending an array with 3 values\n  controller.updateUniverse(1, value)\n  .then(() => {\n    devConsole.log('Universe:', controller.universe, 'array')\n  })\n  .catch((error) => {\n    devConsole.log(error, '', 'string')\n  })\n})\n\n/*\n * UV = 1 Channel\n * Control the intensity of UV light\n */\nuv.addEventListener('change', e => {\n  let value = parseInt(e.target.value, 10)\n\n  devConsole.log('---', '', 'string')\n  devConsole.log(`Set UV on Channel 4 to ${value}`, '', 'string')\n\n  // Update starts at channel 4\n  controller.updateUniverse(4, value)\n  .then(() => {\n    devConsole.log('Universe:', controller.universe, 'array')\n  })\n  .catch((error) => {\n    devConsole.log(error, '', 'string')\n  })\n\n})\n\n/*\n * Dimmer = 1 Channel\n * Control the brightness of the PAR light\n * If dimmer is 0, then no color / UV is shown\n * If dimmer is 255, then LEDs are at full brightness\n */\ndimmer.addEventListener('change', e => {\n  let value = parseInt(e.target.value, 10)\n\n  devConsole.log('---', '', 'string')\n  devConsole.log(`Set Dimmer on Channel 5 to ${value}`, '', 'string')\n\n  // Update starts at channel 5\n  controller.updateUniverse(5, value)\n  .then(() => {\n    devConsole.log('Universe:', controller.universe, 'array')\n  })\n  .catch((error) => {\n    devConsole.log(error, '', 'string')\n  })\n})\n\n/*\n * Strobe = 1 Channel\n * Control the strobe effect\n * If strobe is 0, no flashing of the LEDs\n * If strobe is 255, then the LEDs flash at a super high rate\n */\nstrobe.addEventListener('change', e => {\n  let value = parseInt(e.target.value, 10)\n\n  devConsole.log('---', '', 'string')\n  devConsole.log(`Set Strobe on Channel 6 to ${value}`, '', 'string')\n\n  // Update starts at channel 6\n  controller.updateUniverse(6, value)\n  .then(() => {\n    devConsole.log('Universe:', controller.universe, 'array')\n  })\n  .catch((error) => {\n    devConsole.log(error, '', 'string')\n  })\n})\n","export default class DevConsole {\n  constructor() {\n    this.output = document.getElementById('console')\n  }\n\n  log(message, data, type) {\n    let fullMessage = ''\n\n    switch (type) {\n      case 'USBDevice':\n        fullMessage = `${message}: ${data}`\n        break\n\n      case 'array':\n        fullMessage = message + ' ' + JSON.stringify(data)\n        break\n\n      case 'keyvalue':\n        fullMessage = `${message}: ${data}`\n        break\n\n      default:\n        fullMessage = message + ' ' + data\n    }\n\n    console.log(fullMessage)\n\n    // let elem = document.createElement('span')\n    // elem.innerHTML = fullMessage\n    // this.output.appendChild(elem)\n\n    this.output.value += fullMessage + '\\n'\n\n    // Automatically scroll to the bottom\n    this.output.scrollTop = this.output.scrollHeight\n  }\n\n}\n"],"sourceRoot":""}